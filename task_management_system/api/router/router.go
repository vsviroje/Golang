package router

import (
	"task_management_system/config"

	controller "task_management_system/api/controller"
	apiMiddleware "task_management_system/api/middleware"
	_ "task_management_system/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	httpSwagger "github.com/swaggo/http-swagger"
)

// IRouter interface does ...
//
//go:generate go run github.com/golang/mock/mockgen -destination=./router_mock.go -package=router . IRouter
type IRouter interface {
	InitRoutes(dto InitRouterDto)
	GetMux() *chi.Mux
}

type router struct {
	mux    *chi.Mux
	config *config.GeneralConfig
}

// NewRouter creates a new router
func NewRouter(config *config.GeneralConfig) IRouter {
	mux := chi.NewRouter()
	mux.Use(middleware.RequestID)

	return &router{
		mux:    mux,
		config: config,
	}
}

func (rt *router) GetMux() *chi.Mux {
	return rt.mux
}

type InitRouterDto struct {
	HealthController      *controller.HealthController
	UsersController       *controller.UsersController
	TaskDetailsController *controller.TaskDetailsController
}

// InitRoutes initializes routes
func (rt *router) InitRoutes(dto InitRouterDto) {

	rt.mux.Route("/v1", func(r chi.Router) {
		r.Use(apiMiddleware.Recovery)
		r.Use(apiMiddleware.SetJSON)
		r.Use(apiMiddleware.ValidateAndGenerateHeaders)

		r.Route("/user", func(r chi.Router) {
			r.Post("/", dto.UsersController.AddUser)
			r.Post("/task/assign", dto.UsersController.AssignUserTask)
		})

		r.Route("/task", func(r chi.Router) {
			r.Get("/", dto.TaskDetailsController.GetTask)
			r.Post("/", dto.TaskDetailsController.AddTask)
			r.Put("/", dto.TaskDetailsController.UpdateTask)
			r.Delete("/", dto.TaskDetailsController.DeleteTask)
		})
	})

	rt.mux.Route("/health", func(router chi.Router) {
		router.Get("/", dto.HealthController.HealthCheck)
	})

	rt.mux.Route("/swagger", func(router chi.Router) {
		router.Get("/*", httpSwagger.WrapHandler)
	})
}
